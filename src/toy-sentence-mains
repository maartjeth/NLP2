# task1

if __name__ == "__main__" or True:
    H = Helper()
    # H.generate_input_fsts()
    H.generate_input_fsts(sentences=['die Freundin des Madchens war zu Hause'], out_base="../dummydata/report/toy-sentence-input", draw=True)

# task2
if __name__ == '__main__':
    H = Helper()
    # H.generate_phrase_table_fsts() # All data

    # Run on dummy data
    H.generate_phrase_table_fsts(sentence_ids = [0],
        out_base = "../dummydata/report/toy-sentence-phrase-table", 
        grammar_base_fn = "../dummydata/report/toy-grammar", draw=True)

# task3
if __name__ == '__main__':
	# Do do the whole thing
	H = Helper()
	# H.generate_mono_translation_fsts()
	#H.generate_best_derivations_fsts()

	#Generate composition: translation
	input_fst = FST("../dummydata/report/toy-sentence-input-0")
	phrase_table_fst = FST("../dummydata/report/toy-sentence-phrase-table-0")
	input_fst.osymbols_fn = phrase_table_fst.isymbols_fn
	input_fst.compile()

	translation = input_fst.compose(phrase_table_fst, "../dummydata/report/toy-sentence-translation-0")
	# translation = FST("../dummydata/blackdog-translation-0")
	translation.isymbols_fn = "../dummydata/report/toy-sentence-input-0.isyms"
	translation.osymbols_fn = "../dummydata/report/toy-sentence-phrase-table-0.osyms"
	translation.compile().draw()

	# Get best derivations
	best_derivation_fst = translation.find_n_best(5, "../dummydata/report/toy-sentence-translation-best")
	best_derivation_fst.decompile()
	best_derivation_fst.copy_symbols()
	best_derivation_fst.draw()

	# Print best translations
	translations = get_path_translations(best_derivation_fst.txtfst_fn)
	for trans, deriv, weight in translations:
		print trans, "\t\t", deriv, "\t\t", weight